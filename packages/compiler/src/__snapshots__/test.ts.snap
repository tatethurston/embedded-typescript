// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler compile(template-1.ets) 1`] = `
"export interface Props {
  users: { name: string }[];
}

export default function (props: Props): string {
  let result = "";
  props.users.forEach(function (user) {
    result += "Name: ";
    result += user.name;
    result += "\\n";
  });
  return result;
}
"
`;

exports[`compiler compile(template-2.ets) 1`] = `
"export interface Props {
  name: string;
  needsPasswordReset: boolean;
}

export default function (props: Props): string {
  let result = "";
  result += "Hello ";
  result += props.name;
  result += "!\\n";
  if (props.needsPasswordReset) {
    result += "You need to update your password.\\n";
  }
  return result;
}
"
`;

exports[`compiler compile(template-3.ets) 1`] = `
"type AccountType = "user" | "admin" | "enterprise";

export interface Props {
  name: string;
  type: AccountType;
}

export default function (props: Props): string {
  let result = "";
  result += "Hello ";
  result += props.name;
  result += ", you are ";
  switch (props.type) {
    case "user": {
      result += "a user!\\n";
      break;
    }
    case "admin": {
      result += "an admin!\\n";
      break;
    }
    case "enterprise": {
      result += "an enterprise user!\\n";
      break;
    }
    default: {
      const exhaust: never = props.type;
      return exhaust;
    }
  }
  return result;
}
"
`;

exports[`compiler compile(template-4.ets) 1`] = `
"import { uppercase } from "./helpers";

export interface Props {
  name: string;
}

export default function (props: Props): string {
  let result = "";
  result += "Hello ";
  result += uppercase(props.name);
  result += "!";
  return result;
}
"
`;

exports[`compiler compile(template-5.ets) 1`] = `
"type AccountType = "user" | "admin" | "enterprise";

export interface Props {
  name: string;
  type: AccountType;
}

export default function (props: Props): string {
  let result = "";
  let userMessage;
  switch (props.type) {
    case "user": {
      userMessage = "a user!";
      break;
    }
    case "admin": {
      userMessage = "an admin!";
      break;
    }
    case "enterprise": {
      userMessage = "an enterprise user!";
      break;
    }
    default: {
      const exhaust: never = props.type;
      return exhaust;
    }
  }
  result += "Hello ";
  result += props.name;
  result += ", you are ";
  result += userMessage;
  return result;
}
"
`;

exports[`compiler compile(template-6.ets) 1`] = `
"import renderUser, { Props as User } from "./user-partial.ets";

export interface Props {
  users: User[];
}

const example = \`1
2
3
4\`;

export default function (props: Props): string {
  let result = "";
  if (props.users.length > 0) {
    result += "Here is a list of users:\\n";
    props.users.forEach(function (user) {
      result += "\\n  ";
      result += preserveIndentation(renderUser(user), "  ");
      result += "\\n";
    });
    result += "\\n";
  }
  result +=
    "The indentation level is preserved for the rendered 'partial'.\\n\\nThere isn't anything special about the 'partial'. Here we used another ets template, but any\\nexpression yeilding a multiline string would be treated the same.\\n\\n  ";
  result += preserveIndentation(example, "  ");
  result += "\\n\\nThe end!";
  return result;
}

function preserveIndentation(text: string, indentation: string): string {
  return text
    .split("\\n")
    .map((line, idx) => (idx === 0 ? line : indentation + line))
    .join("\\n");
}
"
`;

exports[`compiler compile(user-partial.ets) 1`] = `
"export interface Props {
  name: string;
  email: string;
  phone: string;
}

export default function (props: Props): string {
  let result = "";
  result += "Name: ";
  result += props.name;
  result += "\\nEmail: ";
  result += props.email;
  result += "\\nPhone: ";
  result += props.phone;
  return result;
}
"
`;
